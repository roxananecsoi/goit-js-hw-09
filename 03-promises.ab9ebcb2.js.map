{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAiCE,SAAOC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEtB,IAACC,EAAgBC,KAAKC,SAAW,GAGpCC,YAAS,WAELH,EACAF,EAAQ,CAAEH,WAAUC,UACpBG,EAAO,CAAEJ,WAAUC,S,GACtBA,E,IAKN,SAAQQ,EAAuBC,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAE1CU,EAAAd,GAASe,OAAOC,QAAQ,wBAA2CC,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,CAI1E,SAAQc,EAAsBL,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAEzCU,EAAAd,GAASe,OAAOI,QAAQ,sBAAqCF,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,CAtDrEU,EAAAd,GAASe,OAAOK,KAAK,CACnBC,SAAS,IAIEC,SAASC,cAAc,SAG/BC,iBAAiB,UAAU,SAAUC,GAErCA,EAAGC,iBAQJ,IALE,IAAEC,EAAaC,SAASN,SAASC,cAAc,kBAAkBM,OAC/DC,EAAOF,SAASN,SAASC,cAAc,iBAAiBM,OACxDE,EAASH,SAASN,SAASC,cAAc,mBAAmBM,OAGzDG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAKxB9B,EAAM8B,EAHOL,GAAcK,EAAI,GAAKF,GAIzCG,KAAKrB,GACLsB,MAAMhB,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Importăm modulul Notiflix și îl atribuim variabilei notiflix:\nimport Notiflix from 'notiflix';\n\n// Eliminăm iconița implicită din cartușul de afișare Notiflix:\nNotiflix.Notify.init({\n  useIcon: false,\n});\n\n// Selecționăm elementul cu clasa '.form' și îl atribuim variabilei form:\nconst form = document.querySelector('.form');\n\n// Adăugăm un EventListener pentru evenimentul de submit al formularului:\nform.addEventListener('submit', function (event) {\n  // Oprim comportamentul implicit al formularului (trimiterea și reîncărcarea paginii):\n  event.preventDefault();\n\n  // Extragem și transformam în numere întregi valorile din câmpurile formularului:\n  const firstDelay = parseInt(document.querySelector('[name=\"delay\"]').value);\n  const step = parseInt(document.querySelector('[name=\"step\"]').value);\n  const amount = parseInt(document.querySelector('[name=\"amount\"]').value);\n\n  // Iterăm prin numărul specificat de promisiuni:\n  for (let i = 1; i <= amount; i++) {\n    // Calculăm delay-ul curent bazat pe primul delay și pe pas:\n    const currentDelay = firstDelay + (i - 1) * step;\n\n    // Creăm o promisiune utilizând funcția createPromise și atașăm funcțiile de rezolvare și respingere:\n    createPromise(i, currentDelay)\n      .then(handleFulfilledPromise)\n      .catch(handleRejectedPromise);\n  }\n});\n\n// Definim o funcție care returnează o promisiune:\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Generăm aleatoriu dacă promisiunea ar trebui să fie rezolvată sau respinsă:\n    const shouldResolve = Math.random() > 0.3;\n\n    // Stabilim un timeout pentru a simula o operațiune asincronă:\n    setTimeout(() => {\n      // Rezolvăm sau respingem promisiunea în funcție de valoarea generată aleatoriu:\n      shouldResolve\n        ? resolve({ position, delay })\n        : reject({ position, delay });\n    }, delay);\n  });\n}\n\n// Funcție pentru gestionarea promisiunilor rezolvate cu succes:\nfunction handleFulfilledPromise({ position, delay }) {\n  // Afișăm o notificare de succes utilizând Notiflix:\n  Notiflix.Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`);\n}\n\n// Funcție pentru gestionarea promisiunilor respinse:\nfunction handleRejectedPromise({ position, delay }) {\n  // Afișăm o notificare de eșec utilizând Notiflix:\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$handleFulfilledPromise","param","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$handleRejectedPromise","failure","init","useIcon","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","value","step","amount","i","then","catch"],"version":3,"file":"03-promises.ab9ebcb2.js.map"}